package com.kh.board.controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;

import com.kh.board.model.vo.Attachment;
import com.kh.common.MyFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;

/**
 * Servlet implementation class BoardUpdateController
 */
@WebServlet("/update.bo")
public class BoardUpdateController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BoardUpdateController() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 필요한 데이터를 담아서 boardUpdateForm.jsp로 포워딩 시켜주기
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		// 필요한 데이터를 전달받고 실제 Board와, Attachment테이블에 Update쿼리문을 실행
		
		// 1. 전송된 데이터 input file이 포함된경우 enctype="multipart/form-data"로 전송했을것.
		if(ServletFileUpload.isMultipartContent(request)) {
			
			// 1_1. 전송파일 용량제한(10mByte)
			int maxSize = 1024 * 1024 * 10;
			
			// 1_2. 전달된 파일을 저장시킬 서버의 폴더의 물리적인 경로 알아내기
			String savepath = request.getSession().getServletContext().getRealPath("/resources/board_upfiles/");
			
			// 2. 전달된 파일명 수정 작업후 서버에 업로드
//			* 매개변수 생성자로 생성(cos.jar에서 제공하는 객체)
//			 * MultipartRequest multi = new MultipartRequest(request 객체, 저장할 폴더 경로, 용량제한, 인코딩설정값,
//			 * 		파일명을 수정시켜주는 객체);
			MultipartRequest multi = new MultipartRequest(request, savepath, maxSize, "UTF-8", new MyFileRenamePolicy());
			
			// 3. 본격적으로 sql문 실행시 필요한 값들 세팅
			
			// 새롭게 전달된 첨부파일이 있는경우에만 at변수에 필요한 값을 추가할것
			Attachment at = null;
			
			if(multi.getOriginalFileName("upfile") != null ) {
				
				at = new Attachment();
				at.setOriginName("?");
				at.setChangeName("?");
				at.setFilePath("?");
				
				// 첨부파일이 원래 등록되어있을 경우, 원본파일의 파일번호, 수정된 이름을 hidden 넘겨받았음
				if(multi.getParameter("originFileNo")!= null) {
					// 기존에 파일이 있었던 경우
					// Attachment테이블의 정보를 update
					// 기존의 파일번호를 저장시키기
					at.setFileNo( Integer.parseInt(multi.getParameter("originFileNo") ) );
					
					// 기존의 첨부파일을 삭제
					
				}else {
					// 기존에 첨부파일이 없는 경우
					// Attachment체이블에 정보를 insert
					// REF_BNO에 현재 게시글번호를 추가시켜줌.
					at.setRefBno( Integer.parseInt( multi.getParameter("bno") ) );
					
				}
			}
			
			// 하나의 트랜잭션으로 board에 update문과 Attachment테이블의 insert, update 동시에 처리해주기
			
			// 항상 board에 update문은 반드시 실행시켜줘야함.
			// case1 : 새로운 첨부파일이 없는경우(x) -> insert (x) , update(x)
			// case2 : 새로운 첨부파일이 있는경우(o), 기존에도 첨부파일이 있던 경우(o) -> insert (x) , update(o)
			// case3 : 새로운 첨부파일이 있는경우(o), 기존에는 첨부파일이 없던경우(x) -> insert (o) , update(x)
			
			
			// 수정 성공시 : 상세조회페이지로 redirect
			
			// 수정 실패시 : errorPage
			
			
		}else {
			request.setAttribute("errorMsg", "전송방식이 잘못되었습니다.");
			request.getRequestDispatcher("views/common/errorPage.jsp").forward(request, response);
		}
		
		
		
		
		
	}

}
